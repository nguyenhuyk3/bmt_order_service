// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type OrderStatuses string

const (
	OrderStatusesPending  OrderStatuses = "pending"
	OrderStatusesCanceled OrderStatuses = "canceled"
	OrderStatusesFailed   OrderStatuses = "failed"
	OrderStatusesSuccess  OrderStatuses = "success"
)

func (e *OrderStatuses) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatuses(s)
	case string:
		*e = OrderStatuses(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatuses: %T", src)
	}
	return nil
}

type NullOrderStatuses struct {
	OrderStatuses OrderStatuses `json:"order_statuses"`
	Valid         bool          `json:"valid"` // Valid is true if OrderStatuses is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatuses) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatuses, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatuses.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatuses) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatuses), nil
}

type OrderFabs struct {
	ID       int32 `json:"id"`
	OrderID  int32 `json:"order_id"`
	FabID    int32 `json:"fab_id"`
	Quantity int32 `json:"quantity"`
	Price    int32 `json:"price"`
}

type OrderSeats struct {
	ID      int32 `json:"id"`
	OrderID int32 `json:"order_id"`
	SeatID  int32 `json:"seat_id"`
	Price   int32 `json:"price"`
}

type Orders struct {
	ID         int32            `json:"id"`
	OrderedBy  string           `json:"ordered_by"`
	ShowtimeID int32            `json:"showtime_id"`
	ShowDate   pgtype.Date      `json:"show_date"`
	Status     OrderStatuses    `json:"status"`
	Note       string           `json:"note"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}
